from django.test import TestCase
from webforces.server.core import Core
from webforces.server.structs import DBStatus, ERROR_ID, User, Algorithm, Test, Task


class CoreTest(TestCase):
    def setUp(self):
        self.core = Core(validation=True)

    def test_core_is_proper_singletone(self):
        core2 = Core(validation=True)
        self.assertIs(core2, self.core)


class DBTest(TestCase):
    def setUp(self):
        self.core = Core(validation=True)
        self.core.db._populateIds()

    def tearDown(self):
        self.core.db.dropAll()

    def test_can_add_diff_users(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        status1, user1 = self.core.db.addUser(user1)
        status2, user2 = self.core.db.addUser(user2)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(user1.user_id, 1)
        self.assertEqual(user2.user_id, 2)

    def test_cant_add_iden_users(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER1", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        status1, user1 = self.core.db.addUser(user1)
        status2, user2 = self.core.db.addUser(user2)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(user1.user_id, 1)
        self.assertEqual(user2.user_id, ERROR_ID)

    def test_can_get_user_by_correct_user_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        _, user1 = (self.core.db.addUser(user1))
        status, user2 = self.core.db.getUserByID(user1.user_id)
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(user1, user2)

    def test_cant_get_user_by_incorrect_user_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        _, user1 = (self.core.db.addUser(user1))
        status, user2 = self.core.db.getUserByID(user1.user_id + len("typo"))
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(user2.user_id, ERROR_ID)

    def test_can_get_user_by_correct_login(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        _, user1 = (self.core.db.addUser(user1))
        status, user2 = self.core.db.getUserByLogin(user1.login)
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(user1, user2)

    def test_cant_get_user_by_incorrect_login(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        _, user1 = (self.core.db.addUser(user1))
        status, user2 = self.core.db.getUserByLogin(user1.login + "typo")
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(user2.user_id, ERROR_ID)

    def test_can_get_all_users(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        status, users = self.core.db.getAllUsers()
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(users[0], user1)
        self.assertEqual(users[1], user2)

    def test_can_add_diff_algs(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        status1, alg1 = self.core.db.addAlg(alg1)
        status2, alg2 = self.core.db.addAlg(alg2)
        status3, alg3 = self.core.db.addAlg(alg3)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(status3, DBStatus.s_ok)
        self.assertEqual(alg1.alg_id, 1)
        self.assertEqual(alg2.alg_id, 2)
        self.assertEqual(alg3.alg_id, 3)
        self.assertEqual(self.core.db._getNextID("1a"), 1)
        self.assertEqual(self.core.db._getNextID("2a"), 1)
        self.assertEqual(self.core.db._getNextID("3a"), 1)

    def test_cant_add_alg_with_incorrect_user_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id + len("typo"), "SOURCE_ALG", [], 0, 0)
        status, alg = self.core.db.addAlg(alg)
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(alg.alg_id, ERROR_ID)
        self.assertEqual(self.core.db._getNextID("1a"), DBStatus.s_data_issue)

    def test_cant_add_iden_algs(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        status1, alg1 = self.core.db.addAlg(alg1)
        status2, alg2 = self.core.db.addAlg(alg2)
        status3, alg3 = self.core.db.addAlg(alg3)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(status3, DBStatus.s_data_issue)
        self.assertEqual(alg1.alg_id, 1)
        self.assertEqual(alg2.alg_id, ERROR_ID)
        self.assertEqual(alg3.alg_id, ERROR_ID)
        self.assertEqual(self.core.db._getNextID("1a"), 1)
        self.assertEqual(self.core.db._getNextID("2a"), DBStatus.s_data_issue)
        self.assertEqual(self.core.db._getNextID("3a"), DBStatus.s_data_issue)

    def test_can_get_alg_by_correct_title(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user.user_id, "SOURCE_ALG1", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        status, alg2 = self.core.db.getAlgByTitle(alg1.title)
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(alg1, alg2)

    def test_cant_get_algs_by_incorrect_title(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user.user_id, "SOURCE_ALG1", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        status, alg2 = self.core.db.getAlgByTitle(alg1.title + "typo")
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(alg2.alg_id, ERROR_ID)

    def test_can_get_alg_by_correct_alg_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        status1, alg4 = self.core.db.getAlgByID(alg1.alg_id)
        status2, alg5 = self.core.db.getAlgByID(alg2.alg_id)
        status3, alg6 = self.core.db.getAlgByID(alg3.alg_id)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(status3, DBStatus.s_ok)
        self.assertEqual(alg1, alg4)
        self.assertEqual(alg2, alg5)
        self.assertEqual(alg3, alg6)

    def test_cant_get_alg_by_incorrect_alg_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        status1, alg4 = self.core.db.getAlgByID(alg1.alg_id + len("typo"))
        status2, alg5 = self.core.db.getAlgByID(alg2.alg_id + len("typo"))
        status3, alg6 = self.core.db.getAlgByID(alg3.alg_id + len("typo"))
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(status3, DBStatus.s_data_issue)
        self.assertEqual(alg4.alg_id, ERROR_ID)
        self.assertEqual(alg5.alg_id, ERROR_ID)
        self.assertEqual(alg6.alg_id, ERROR_ID)

    def test_can_get_all_author_algs_by_correct_user_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        status1, algs1 = self.core.db.getAllAuthorAlgs(user1.user_id)
        status2, algs2 = self.core.db.getAllAuthorAlgs(user2.user_id)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(alg1, algs1[0])
        self.assertEqual(alg2, algs1[1])
        self.assertEqual(alg3, algs2[0])

    def test_cant_get_all_author_algs_by_incorrect_user_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        status1, algs1 = self.core.db.getAllAuthorAlgs(user1.user_id + len("typo"))
        status2, algs2 = self.core.db.getAllAuthorAlgs(user2.user_id + len("typo"))
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(algs1[0].alg_id, ERROR_ID)
        self.assertEqual(algs2[0].alg_id, ERROR_ID)

    def test_can_add_diff_tests(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id, "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id, "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id, "TITLE_TEST4", "SOURCE_TEST4")
        status1, test1 = self.core.db.addTest(test1)
        status2, test2 = self.core.db.addTest(test2)
        status3, test3 = self.core.db.addTest(test3)
        status4, test4 = self.core.db.addTest(test4)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(status3, DBStatus.s_ok)
        self.assertEqual(status4, DBStatus.s_ok)
        self.assertEqual(test1.test_id, 1)
        self.assertEqual(test2.test_id, 2)
        self.assertEqual(test3.test_id, 1)
        self.assertEqual(test4.test_id, 1)
        self.assertEqual(self.core.db._getNextID("1a"), 3)
        self.assertEqual(self.core.db._getNextID("2a"), 2)
        self.assertEqual(self.core.db._getNextID("3a"), 2)

    def test_cant_add_iden_tests(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        test1 = Test(0, alg.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg.alg_id, "TITLE_TEST1", "SOURCE_TEST2")
        status1, test1 = self.core.db.addTest(test1)
        status2, test2 = self.core.db.addTest(test2)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(test1.test_id, 1)
        self.assertEqual(test2.test_id, ERROR_ID)
        self.assertEqual(self.core.db._getNextID("1a"), 2)

    def test_cant_add_test_with_incorrect_alg_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        test = Test(0, alg.alg_id + len("typo"), "TITLE_TEST", "SOURCE_TEST")
        status, test = self.core.db.addTest(test)
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(test.test_id, ERROR_ID)
        self.assertEqual(self.core.db._getNextID("1a"), 1)

    def test_can_get_test_by_correct_ids(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id, "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id, "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id, "TITLE_TEST4", "SOURCE_TEST4")
        _, test1 = (self.core.db.addTest(test1))
        _, test2 = (self.core.db.addTest(test2))
        _, test3 = (self.core.db.addTest(test3))
        _, test4 = (self.core.db.addTest(test4))
        status1, test5 = self.core.db.getTest(alg1.alg_id, test1.test_id)
        status2, test6 = self.core.db.getTest(alg1.alg_id, test2.test_id)
        status3, test7 = self.core.db.getTest(alg2.alg_id, test3.test_id)
        status4, test8 = self.core.db.getTest(alg3.alg_id, test4.test_id)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(status3, DBStatus.s_ok)
        self.assertEqual(status4, DBStatus.s_ok)
        self.assertEqual(test1, test5)
        self.assertEqual(test2, test6)
        self.assertEqual(test3, test7)
        self.assertEqual(test4, test8)

    def test_cant_get_test_by_incorrect_ids(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id + len("typo"), "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id + len("typo"), "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id + len("typo"), "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id + len("typo"), "TITLE_TEST4", "SOURCE_TEST4")
        _, test1 = (self.core.db.addTest(test1))
        _, test2 = (self.core.db.addTest(test2))
        _, test3 = (self.core.db.addTest(test3))
        _, test4 = (self.core.db.addTest(test4))
        status1, test5 = self.core.db.getTest(alg1.alg_id, test1.test_id)
        status2, test6 = self.core.db.getTest(alg1.alg_id, test2.test_id)
        status3, test7 = self.core.db.getTest(alg2.alg_id, test3.test_id)
        status4, test8 = self.core.db.getTest(alg3.alg_id, test4.test_id)
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(status3, DBStatus.s_data_issue)
        self.assertEqual(status4, DBStatus.s_data_issue)
        self.assertEqual(test5.test_id, ERROR_ID)
        self.assertEqual(test6.test_id, ERROR_ID)
        self.assertEqual(test7.test_id, ERROR_ID)
        self.assertEqual(test8.test_id, ERROR_ID)

    def test_can_get_all_alg_tests_by_correct_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id, "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id, "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id, "TITLE_TEST4", "SOURCE_TEST4")
        _, test1 = (self.core.db.addTest(test1))
        _, test2 = (self.core.db.addTest(test2))
        _, test3 = (self.core.db.addTest(test3))
        _, test4 = (self.core.db.addTest(test4))
        status1, tests1 = self.core.db.getAllAlgTests(alg1.alg_id)
        status2, tests2 = self.core.db.getAllAlgTests(alg2.alg_id)
        status3, tests3 = self.core.db.getAllAlgTests(alg3.alg_id)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(status3, DBStatus.s_ok)
        self.assertEqual(tests1[0], test1)
        self.assertEqual(tests1[1], test2)
        self.assertEqual(tests2[0], test3)
        self.assertEqual(tests3[0], test4)

    def test_cant_get_all_alg_tests_by_incorrect_id(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id, "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id, "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id, "TITLE_TEST4", "SOURCE_TEST4")
        _, test1 = (self.core.db.addTest(test1))
        _, test2 = (self.core.db.addTest(test2))
        _, test3 = (self.core.db.addTest(test3))
        _, test4 = (self.core.db.addTest(test4))
        status1, tests1 = self.core.db.getAllAlgTests(alg1.alg_id + len("typo"))
        status2, tests2 = self.core.db.getAllAlgTests(alg2.alg_id + len("typo"))
        status3, tests3 = self.core.db.getAllAlgTests(alg3.alg_id + len("typo"))
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(status3, DBStatus.s_data_issue)
        self.assertEqual(tests1[0].test_id, ERROR_ID)
        self.assertEqual(tests2[0].test_id, ERROR_ID)
        self.assertEqual(tests3[0].test_id, ERROR_ID)

    def test_can_add_task_with_correct_alg_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        task1 = Task(0, alg.alg_id, 0, "MESSAGE_TASK1")
        task2 = Task(0, alg.alg_id, 0, "MESSAGE_TASK2")
        status1, task1 = self.core.db.addTask(task1)
        status2, task2 = self.core.db.addTask(task2)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(task1.task_id, 1)
        self.assertEqual(task2.task_id, 2)
        self.assertEqual(self.core.db._getNextID("tasks"), 3)

    def test_cant_add_task_with_incorrect_alg_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        task1 = Task(0, alg.alg_id + len("typo"), 0, "MESSAGE_TASK1")
        task2 = Task(0, alg.alg_id + len("typo"), 0, "MESSAGE_TASK2")
        status1, task1 = self.core.db.addTask(task1)
        status2, task2 = self.core.db.addTask(task2)
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(task1.task_id, ERROR_ID)
        self.assertEqual(task2.task_id, ERROR_ID)
        self.assertEqual(self.core.db._getNextID("tasks"), 1)

    def test_can_get_task_with_correct_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        task1 = Task(0, alg.alg_id, 0, "MESSAGE_TASK1")
        task2 = Task(0, alg.alg_id, 0, "MESSAGE_TASK2")
        _, task1 = (self.core.db.addTask(task1))
        _, task2 = (self.core.db.addTask(task2))
        status1, task3 = self.core.db.getTask(task1.task_id)
        status2, task4 = self.core.db.getTask(task2.task_id)
        self.assertEqual(status1, DBStatus.s_ok)
        self.assertEqual(status2, DBStatus.s_ok)
        self.assertEqual(task1, task3)
        self.assertEqual(task2, task4)

    def test_cant_get_task_with_incorrect_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        task1 = Task(0, alg.alg_id, 0, "MESSAGE_TASK1")
        task2 = Task(0, alg.alg_id, 0, "MESSAGE_TASK2")
        _, task1 = (self.core.db.addTask(task1))
        _, task2 = (self.core.db.addTask(task2))
        status1, task3 = self.core.db.getTask(task1.task_id + len("typo"))
        status2, task4 = self.core.db.getTask(task2.task_id + len("typo"))
        self.assertEqual(status1, DBStatus.s_data_issue)
        self.assertEqual(status2, DBStatus.s_data_issue)
        self.assertEqual(task3.task_id, ERROR_ID)
        self.assertEqual(task4.task_id, ERROR_ID)

    def test_can_get_all_task(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = (self.core.db.addUser(user))
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = (self.core.db.addAlg(alg))
        task1 = Task(0, alg.alg_id, 0, "MESSAGE_TASK1")
        task2 = Task(0, alg.alg_id, 0, "MESSAGE_TASK2")
        _, task1 = (self.core.db.addTask(task1))
        _, task2 = (self.core.db.addTask(task2))
        status, tasks = self.core.db.getAllTasks()
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(tasks[0], task1)
        self.assertEqual(tasks[1], task2)

    def test_can_get_stats(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = (self.core.db.addUser(user1))
        _, user2 = (self.core.db.addUser(user2))
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = (self.core.db.addAlg(alg1))
        _, alg2 = (self.core.db.addAlg(alg2))
        _, alg3 = (self.core.db.addAlg(alg3))
        test1 = Test(0, alg1.alg_id, "TITLE_TEST1", "SOURCE_TEST1")
        test2 = Test(0, alg1.alg_id, "TITLE_TEST2", "SOURCE_TEST2")
        test3 = Test(0, alg2.alg_id, "TITLE_TEST3", "SOURCE_TEST3")
        test4 = Test(0, alg3.alg_id, "TITLE_TEST4", "SOURCE_TEST4")
        _, test1 = (self.core.db.addTest(test1))
        _, test2 = (self.core.db.addTest(test2))
        _, test3 = (self.core.db.addTest(test3))
        _, test4 = (self.core.db.addTest(test4))
        task1 = Task(0, alg1.alg_id, 0, "MESSAGE_TASK1")
        task2 = Task(0, alg2.alg_id, 0, "MESSAGE_TASK2")
        task3 = Task(0, alg3.alg_id, 0, "MESSAGE_TASK3")
        _, task1 = (self.core.db.addTask(task1))
        _, task2 = (self.core.db.addTask(task2))
        _, task3 = (self.core.db.addTask(task3))
        status, stats = self.core.db.getStats()
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(stats.num_of_users, 2)
        self.assertEqual(stats.num_of_algs, 3)
        self.assertEqual(stats.num_of_tests, 4)
        self.assertEqual(stats.num_of_tasks, 3)

    def test_can_update_user_full_name(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        self.assertEqual(user.first_name, "FN_USER")
        self.assertEqual(user.second_name, "SN_USER")
        self.assertEqual(user.middle_name, "MN_USER")
        user.first_name = "FN_USER_UPD"
        user.second_name = "SN_USER_UPD"
        user.middle_name = "MN_USER_UPD"
        status = self.core.db.updFNUser(user)
        self.assertEqual(status, DBStatus.s_ok)
        status, user2 = self.core.db.getUserByID(user.user_id)
        self.assertEqual(status, DBStatus.s_ok)
        self.assertEqual(user2.first_name, "FN_USER_UPD")
        self.assertEqual(user2.second_name, "SN_USER_UPD")
        self.assertEqual(user2.middle_name, "MN_USER_UPD")

    def test_cant_update_nonexisting_user(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        status = self.core.db.updFNUser(user)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, _ = self.core.db.getUserByID(user.user_id)
        self.assertEqual(status, DBStatus.s_data_issue)

    def test_can_update_user_bound_algs(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        user3 = User(0, "LOGIN_USER3", "FN_USER3", "SN_USER3", "MN_USER3", [], [])
        user4 = User(0, "LOGIN_USER4", "FN_USER4", "SN_USER4", "MN_USER4", [], [])
        user5 = User(0, "LOGIN_USER5", "FN_USER5", "SN_USER5", "MN_USER5", [], [])
        _, user1 = self.core.db.addUser(user1)
        _, user2 = self.core.db.addUser(user2)
        _, user3 = self.core.db.addUser(user3)
        _, user4 = self.core.db.addUser(user4)
        _, user5 = self.core.db.addUser(user5)
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = self.core.db.addAlg(alg1)
        _, alg2 = self.core.db.addAlg(alg2)
        _, alg3 = self.core.db.addAlg(alg3)
        user3.bound_ids = [alg1.alg_id, alg2.alg_id]
        user4.bound_ids = [alg2.alg_id]
        user5.bound_ids = [alg1.alg_id, alg2.alg_id, alg3.alg_id]
        st1 = self.core.db.bindAlg(user3)
        st2 = self.core.db.bindAlg(user4)
        st3 = self.core.db.bindAlg(user5)
        self.assertEqual(st1, DBStatus.s_ok)
        self.assertEqual(st2, DBStatus.s_ok)
        self.assertEqual(st3, DBStatus.s_ok)
        _, user3 = self.core.db.getUserByID(user3.user_id)
        _, user4 = self.core.db.getUserByID(user4.user_id)
        _, user5 = self.core.db.getUserByID(user5.user_id)
        self.assertEqual(user3.bound_ids, [alg1.alg_id, alg2.alg_id])
        self.assertEqual(user4.bound_ids, [alg2.alg_id])
        self.assertEqual(user5.bound_ids, [alg1.alg_id, alg2.alg_id, alg3.alg_id])

    def test_cant_update_user_bound_algs_with_incorrect_user_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        status = self.core.db.bindAlg(user)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, _ = self.core.db.getUserByID(user.user_id)
        self.assertEqual(status, DBStatus.s_data_issue)

    def test_cant_update_user_bound_algs_with_incorrect_alg_id_1(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        user.bound_ids = [1]
        status = self.core.db.bindAlg(user)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, user = self.core.db.getUserByID(user.user_id)
        self.assertEqual(user.bound_ids, [])

    def test_cant_update_user_bound_algs_with_incorrect_alg_id_2(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = self.core.db.addAlg(alg)
        _, user = self.core.db.getUserByID(user.user_id)
        user.bound_ids = [alg.alg_id]
        status = self.core.db.bindAlg(user)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, user = self.core.db.getUserByID(user.user_id)
        self.assertEqual(user.bound_ids, [])

    def test_cant_add_alg_with_negative_cost(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, -100)
        st, alg = self.core.db.addAlg(alg)
        self.assertEqual(st, DBStatus.s_data_issue)
        self.assertEqual(self.core.db._getNextID("1a"), DBStatus.s_data_issue)

    def test_can_update_alg_cost(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        _, alg = self.core.db.addAlg(alg)
        alg.cost = 100
        status = self.core.db.updAlgCost(alg)
        self.assertEqual(status, DBStatus.s_ok)
        _, alg = self.core.db.getAlgByID(alg.alg_id)
        self.assertEqual(alg.cost, 100)

    def test_cant_update_nonexisting_alg(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        status = self.core.db.updAlgCost(alg)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, _ = self.core.db.getAlgByID(alg.alg_id)
        self.assertEqual(status, DBStatus.s_data_issue)

    def test_cant_update_alg_cost_to_negative(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        _, user = self.core.db.addUser(user)
        alg = Algorithm(0, "TITLE_ALG", "DESCR_ALG", user.user_id, "SOURCE_ALG", [], 0, 0)
        status = self.core.db.updAlgCost(alg)
        self.assertEqual(status, DBStatus.s_data_issue)
        status, _ = self.core.db.getAlgByID(alg.alg_id)
        self.assertEqual(status, DBStatus.s_data_issue)

    def test_can_get_all_algs_1(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        _, user1 = self.core.db.addUser(user1)
        _, user2 = self.core.db.addUser(user2)
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 0)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        _, alg1 = self.core.db.addAlg(alg1)
        _, alg2 = self.core.db.addAlg(alg2)
        _, alg3 = self.core.db.addAlg(alg3)
        st, algs = self.core.db.getAllAlgs()
        self.assertEqual(st, DBStatus.s_ok)
        self.assertEqual(algs[0], alg1)
        self.assertEqual(algs[1], alg2)
        self.assertEqual(algs[2], alg3)

    def test_can_get_all_algs_2(self):
        st, algs = self.core.db.getAllAlgs()
        self.assertEqual(st, DBStatus.s_ok)
        self.assertEqual(algs, [])

    def test_can_get_all_algs_with_flags(self):
        user1 = User(0, "LOGIN_USER1", "FN_USER1", "SN_USER1", "MN_USER1", [], [])
        user2 = User(0, "LOGIN_USER2", "FN_USER2", "SN_USER2", "MN_USER2", [], [])
        user3 = User(0, "LOGIN_USER3", "FN_USER3", "SN_USER3", "MN_USER3", [], [])
        _, user1 = self.core.db.addUser(user1)
        _, user2 = self.core.db.addUser(user2)
        _, user3 = self.core.db.addUser(user3)
        alg1 = Algorithm(0, "TITLE_ALG1", "DESCR_ALG1", user1.user_id, "SOURCE_ALG1", [], 0, 0)
        alg2 = Algorithm(0, "TITLE_ALG2", "DESCR_ALG2", user1.user_id, "SOURCE_ALG2", [], 0, 100)
        alg3 = Algorithm(0, "TITLE_ALG3", "DESCR_ALG3", user2.user_id, "SOURCE_ALG3", [], 0, 0)
        alg4 = Algorithm(0, "TITLE_ALG4", "DESCR_ALG4", user3.user_id, "SOURCE_ALG4", [], 0, 100)
        _, alg1 = self.core.db.addAlg(alg1)
        _, alg2 = self.core.db.addAlg(alg2)
        _, alg3 = self.core.db.addAlg(alg3)
        _, alg4 = self.core.db.addAlg(alg4)
        st, algs, flags = self.core.db.getAllAvailableAlgs(user1.user_id)
        self.assertEqual(st, DBStatus.s_ok)
        self.assertEqual(algs[0], alg1)
        self.assertEqual(flags[0], True)
        self.assertEqual(algs[1], alg2)
        self.assertEqual(flags[1], True)
        self.assertEqual(algs[2], alg3)
        self.assertEqual(flags[2], True)
        self.assertEqual(algs[3], alg4)
        self.assertEqual(flags[3], False)
        user3.bound_ids = [alg1.alg_id]
        self.core.db.bindAlg(user3)
        st, algs, flags = self.core.db.getAllAvailableAlgs(user3.user_id)
        self.assertEqual(st, DBStatus.s_ok)
        self.assertEqual(algs[0], alg1)
        self.assertEqual(flags[0], True)
        self.assertEqual(algs[1], alg2)
        self.assertEqual(flags[1], False)
        self.assertEqual(algs[2], alg3)
        self.assertEqual(flags[2], True)
        self.assertEqual(algs[3], alg4)
        self.assertEqual(flags[3], True)

    def test_cant_get_all_algs_with_flags_with_incorrect_user_id(self):
        user = User(0, "LOGIN_USER", "FN_USER", "SN_USER", "MN_USER", [], [])
        status, algs, flags = self.core.db.getAllAvailableAlgs(user.user_id)
        self.assertEqual(status, DBStatus.s_data_issue)
        self.assertEqual(algs, [Algorithm(ERROR_ID)])
        self.assertEqual(flags, [ERROR_ID])
        status, _ = self.core.db.getUserByID(user.user_id)
        self.assertEqual(status, DBStatus.s_data_issue)
